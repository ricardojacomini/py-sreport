#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Python script to compute Service Units (SU) for a given SLURM job ID
# The Advanced Research Computing at Hopkins (ARCH)
# Ricardo S Jacomini < rdesouz4 @ jhu.edu >
# Date: Feb, 20 2025

import subprocess
import sys
import re
import argparse

def run_command(command, cmd=False):
    """Run a shell command and return the output, or print it if in dry-run mode."""

    if cmd:
        print(f"[SLURM CMD] {command}")  # Echo the command
    try:
        return subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL, universal_newlines=True).strip()
    except subprocess.CalledProcessError:
        return None

def get_partition(job_id, cmd):
    """Retrieve the partition for a given job ID."""
    command = f"sacct -P -n -a --format Partition -j {job_id} | head -n 1"
    return run_command(command, cmd)

def get_billing_weights(partition, cmd=False):
    """Retrieve billing weights for the given partition."""
    command = f"scontrol show partition {partition} | grep 'TRESBillingWeights'"
    output = run_command(command, cmd)

    if not output:
        return 1, 1, 0  # Default values (avoid None)

    cpu_weight, mem_weight, gpu_weight = None, None, 0  # Default GPU weight is 0

    match = re.search(r"CPU=(\d+),Mem=([\d\.]+)([MG]?)", output)
    if match:
        cpu_weight = int(match.group(1))
        mem_weight = float(match.group(2))
        if match.group(3) == 'M':
            mem_weight /= 1024  # Convert MB to GB

    match_gpu = re.search(r"GRES/gpu=(\d+)", output)
    if match_gpu:
        gpu_weight = int(match_gpu.group(1))

    return cpu_weight if cpu_weight is not None else 1, \
           mem_weight if mem_weight is not None else 1, \
           gpu_weight  # GPU weight can be 0


def get_job_info(job_id, cmd):
    """Retrieve job details including allocated CPUs, requested memory, elapsed time, and job state."""
    command = f"sacct -P -n -a --format AllocCPUS,REQMEM,Elapsed,State -j {job_id} | head -n 1"
    output = run_command(command, cmd)

    if not output or output == '':
        return None, None, None, None

    fields = output.split('|')

    if len(fields) < 4 or fields[3] in ["PENDING", "RUNNING", "CANCELLED", "FAILED"]:
        return None, None, None, fields[3] if len(fields) > 3 else "UNKNOWN"

    alloc_cpus = int(fields[0]) if fields[0] else 0
    req_mem_gb = float(fields[1].replace('G', '')) if fields[1] else 0
    elapsed_time = fields[2]
    state = fields[3]

    return alloc_cpus, req_mem_gb, elapsed_time, state

def convert_time_to_hours(elapsed_time):
    """Convert elapsed time from HH:MM:SS format to total hours, ensuring a minimum time threshold."""
    try:
        hh, mm, ss = map(int, elapsed_time.split(':'))
        total_hours = hh + (mm / 60) + (ss / 3600)
        return max(total_hours, 1 / 3600)  # Ensure at least 1 second (0.00028 hours)
    except ValueError:
        return 1 / 3600  # Default to smallest possible nonzero time if parsing fails

def get_gpu_count(job_id, gpu_weight, cmd):
    """Retrieve GPU count using scontrol, but only if GPU billing applies."""
    if gpu_weight == 0:
        return 0  # No GPU billing, no need to check

    command = f"scontrol show job {job_id} | grep TresPerNode"
    output = run_command(command, cmd)

    if output:
        match = re.search(r"gres/gpu=(\d+)", output)
        if match:
            return int(match.group(1))

    return 0  # Default to 0 if no GPU count is found


def main():
    parser = argparse.ArgumentParser(description="Compute Service Units (SU) for a given SLURM job ID.")
    parser.add_argument("job_id", type=str, help="SLURM Job ID")
    parser.add_argument("--cmd", action="store_true", default=False, help="Print SLURM commands without executing them")
    
    args = parser.parse_args()
    job_id = args.job_id
    cmd = args.cmd

    partition = get_partition(job_id, cmd)

    if not partition:
        print(f"Error: Job ID {job_id} not found or still running.")
        sys.exit(1)

    cpu_weight, mem_weight, gpu_weight = get_billing_weights(partition, cmd)

    if cpu_weight is None or mem_weight is None or gpu_weight is None:
        print(f"Error: No billing weights found for partition {partition}")
        sys.exit(1)

    alloc_cpus, req_mem_gb, elapsed_time, state = get_job_info(job_id, cmd)

    if state and state in ["PENDING", "RUNNING", "CANCELLED", "FAILED", "TIMEOUT"]:
        print(f"Job ID: {job_id} - Partition: {partition}")
        print(f"State: {state} (Job not finished yet)")
        sys.exit(0)

    if alloc_cpus is None or req_mem_gb is None or elapsed_time is None:
        print(f"Error: Unable to retrieve job info for Job ID {job_id}")
        sys.exit(1)

    total_hours = convert_time_to_hours(elapsed_time)

    gpu_count = get_gpu_count(job_id, gpu_weight, cmd)

    su_cpu = alloc_cpus * cpu_weight
    su_mem = req_mem_gb * mem_weight
    su_gpu = gpu_count * gpu_weight

    su_per_hour = su_cpu + su_mem + su_gpu
    total_su = su_per_hour * total_hours

    highest_contributor, highest_value = max(
        [("CPU", su_cpu), ("Memory", su_mem), ("GPU", su_gpu)],
        key=lambda x: x[1]
    )

    print(f"Job ID: {job_id} - Partition: {partition}")
    print(f"State: {state}")
    print(f"Billing Weights: CPU={cpu_weight}, Mem={mem_weight}, GPU={gpu_weight}")
    print(f"Allocated CPUs: {alloc_cpus}")
    print(f"Requested Memory: {req_mem_gb} GB")
    print(f"Elapsed Time: {total_hours:.2f} hours")
    print(f"GPU Count: {gpu_count}")
    print(f"SU per Hour: {su_per_hour:.2f}")
    print(f"  - CPU SU: {su_cpu:.2f}")
    print(f"  - Memory SU: {su_mem:.2f}")
    print(f"  - GPU SU: {su_gpu:.2f}")
    print(f"Total SU: {total_su:.2f}")
    print(f"Highest Contributor to SU: {highest_value:.2f} {highest_contributor}")

if __name__ == "__main__":
    main()

